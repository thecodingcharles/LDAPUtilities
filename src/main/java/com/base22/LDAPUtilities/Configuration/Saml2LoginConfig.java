package com.base22.LDAPUtilities.Configuration;

import org.springframework.context.annotation.Bean;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.converter.RsaKeyConverters;
import org.springframework.security.saml2.credentials.Saml2X509Credential;
import org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.security.PrivateKey;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

import static org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType.*;


@EnableWebSecurity
public class Saml2LoginConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                .anyRequest().authenticated()
                .and()
                .saml2Login()
        ;
    }
    @Bean
    //SAML configuration
    //Mapping this application to one or more Identity Providers
    public RelyingPartyRegistrationRepository relyingPartyRegistrationRepository() {
        return new InMemoryRelyingPartyRegistrationRepository(this.getSaml2RelyingPartyRegistration());
    }

    private RelyingPartyRegistration getSaml2RelyingPartyRegistration() {


         /*
        SP credentials are always a list of PrivateKey-X509Certificate object pairs and
        IDP credentials are a list of X509Certificate objects.
         */

        //remote IDP entity ID
        String idpEntityId = "https://my.identity.base22.com";
        //remote WebSSO Endpoint - Where to Send AuthNRequests to
        String webSsoEndpoint = "https://my.identity.base22.com/sso";
        //local registration ID
        String registrationId = "simplesamlbase22";
        //local entity ID - autogenerated based on URL
        String localEntityIdTemplate = "{baseUrl}/saml2/service-provider-metadata/{registrationId}";
        //local SSO URL - autogenerated, endpoint to receive SAML Response objects
        String acsUrlTemplate = "{baseUrl}/login/saml2/sso/{registrationId}";
        //local signing (and local decryption key and remote encryption certificate)
        Saml2X509Credential signingCredential = getSigningCredential();
        //IDP certificate for verification of incoming messages
        Saml2X509Credential idpVerificationCertificate = getVerificationCertificate();
        RelyingPartyRegistration rp = RelyingPartyRegistration.withRegistrationId(registrationId)
                .remoteIdpEntityId(idpEntityId)
                .idpWebSsoUrl(webSsoEndpoint)
                 .credentials(c -> c.add(signingCredential))
                .credentials(c -> c.add(idpVerificationCertificate))
                .localEntityIdTemplate(localEntityIdTemplate)
                .assertionConsumerServiceUrlTemplate(acsUrlTemplate)
                .build();

        return rp;
    }

    private Saml2X509Credential getVerificationCertificate() {
        String certificate = "-----BEGIN CERTIFICATE-----\n" +
                "MIIC4jCCAcqgAwIBAgIQck322NdR1a5GW8McjXQb9DANBgkqhkiG9w0BAQsFADAt\n" +
                "MSswKQYDVQQDEyJBREZTIFNpZ25pbmcgLSBpZGVudGl0eS5iYXNlMjIuY29tMB4X\n" +
                "DTE5MDgxOTIyNTE1OVoXDTIwMDgxODIyNTE1OVowLTErMCkGA1UEAxMiQURGUyBT\n" +
                "aWduaW5nIC0gaWRlbnRpdHkuYmFzZTIyLmNvbTCCASIwDQYJKoZIhvcNAQEBBQAD\n" +
                "ggEPADCCAQoCggEBAKgHt1gtK5H3XG6RlLMgAeVPJfZRq8/WIU2RlsTvlCF9vhCj\n" +
                "fN4LbouAyRD+nOzAHrPxnSBT37sE6go78oPSaJ3Oh89pqwPcf6JCaK2fjNXQSaGy\n" +
                "GnucFwTAKraSZp1COfzbIZhPaED7My7FFmbZ53DzlSEwpEhQLZpTSSd/vuhFHHAh\n" +
                "l+/f83lCX//QOeKGhEA8B/8oFc+CaMyYO+zdyaU5IcpRH0bJeKytlBlcn9J4iS/a\n" +
                "LKsoo5W4e56s5v7Q8fjiHUbSfnxhITFUm0T+v2KulH8ihqw0ez9PkKYiu43KJzjG\n" +
                "ZpdQbAreylWy1UsnrlH6KGP6x/NrXynu4zYP4ukCAwEAATANBgkqhkiG9w0BAQsF\n" +
                "AAOCAQEAd+KC/eHQdJ/mV93DUckUdTUntJPgnNl67E3HH+KLus/IsGBkch+rgB0g\n" +
                "dOMxGeH/Xxl5KkOLb44cF3E43/DGbwNLjNis2TqkzNc2lXkL2SmKmVN9alJO4Qlx\n" +
                "BVDiGZ0Xftn1M/SFdZUnkjmicm6/xV4moR1etnUWn2wuBGDMdrM1VtuLHsAEjq57\n" +
                "WXBnq17aFDBGRnOUBikAx6WOSNgBXtJk+0a+kVHGiKDOBScINzmVkFePGfxQ243S\n" +
                "U59lLuOaBX4GHWRVpJ6xm+JugTfWogIDFQiAcrNcCKqk/EVifex6+uvtOq6MGcXk\n" +
                "c3rLfaScafA5oBJKoK/7uuJNgNZ/dg==\n" +
                "-----END CERTIFICATE-----";
        return new Saml2X509Credential(
                x509Certificate(certificate),
                VERIFICATION,ENCRYPTION
        );
    }


    private X509Certificate x509Certificate(String source) {
        try {
            final CertificateFactory factory = CertificateFactory.getInstance("X.509");
            return (X509Certificate) factory.generateCertificate(
                    new ByteArrayInputStream(source.getBytes(StandardCharsets.UTF_8))
            );
        } catch (Exception e) {
            throw new IllegalArgumentException(e);
        }
    }

    private Saml2X509Credential getSigningCredential() {
        String key = "-----BEGIN PRIVATE KEY-----\n" +
                "MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBANG7v8QjQGU3MwQE\n" +
                "VUBxvH6Uuiy/MhZT7TV0ZNjyAF2ExA1gpn3aUxx6jYK5UnrpxRRE/KbeLucYbOhK\n" +
                "cDECt77Rggz5TStrOta0BQTvfluRyoQtmQ5Nkt6Vqg7O2ZapFt7k64Sal7AftzH6\n" +
                "Q2BxWN1y04bLdDrH4jipqRj/2qEFAgMBAAECgYEAj4ExY1jjdN3iEDuOwXuRB+Nn\n" +
                "x7pC4TgntE2huzdKvLJdGvIouTArce8A6JM5NlTBvm69mMepvAHgcsiMH1zGr5J5\n" +
                "wJz23mGOyhM1veON41/DJTVG+cxq4soUZhdYy3bpOuXGMAaJ8QLMbQQoivllNihd\n" +
                "vwH0rNSK8LTYWWPZYIECQQDxct+TFX1VsQ1eo41K0T4fu2rWUaxlvjUGhK6HxTmY\n" +
                "8OMJptunGRJL1CUjIb45Uz7SP8TPz5FwhXWsLfS182kRAkEA3l+Qd9C9gdpUh1uX\n" +
                "oPSNIxn5hFUrSTW1EwP9QH9vhwb5Vr8Jrd5ei678WYDLjUcx648RjkjhU9jSMzIx\n" +
                "EGvYtQJBAMm/i9NR7IVyyNIgZUpz5q4LI21rl1r4gUQuD8vA36zM81i4ROeuCly0\n" +
                "KkfdxR4PUfnKcQCX11YnHjk9uTFj75ECQEFY/gBnxDjzqyF35hAzrYIiMPQVfznt\n" +
                "YX/sDTE2AdVBVGaMj1Cb51bPHnNC6Q5kXKQnj/YrLqRQND09Q7ParX0CQQC5NxZr\n" +
                "9jKqhHj8yQD6PlXTsY4Occ7DH6/IoDenfdEVD5qlet0zmd50HatN2Jiqm5ubN7CM\n" +
                "INrtuLp4YHbgk1mi\n" +
                "-----END PRIVATE KEY-----";
        String certificate = "-----BEGIN CERTIFICATE-----\n" +
                "MIICgTCCAeoCCQCuVzyqFgMSyDANBgkqhkiG9w0BAQsFADCBhDELMAkGA1UEBhMC\n" +
                "VVMxEzARBgNVBAgMCldhc2hpbmd0b24xEjAQBgNVBAcMCVZhbmNvdXZlcjEdMBsG\n" +
                "A1UECgwUU3ByaW5nIFNlY3VyaXR5IFNBTUwxCzAJBgNVBAsMAnNwMSAwHgYDVQQD\n" +
                "DBdzcC5zcHJpbmcuc2VjdXJpdHkuc2FtbDAeFw0xODA1MTQxNDMwNDRaFw0yODA1\n" +
                "MTExNDMwNDRaMIGEMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3RvbjES\n" +
                "MBAGA1UEBwwJVmFuY291dmVyMR0wGwYDVQQKDBRTcHJpbmcgU2VjdXJpdHkgU0FN\n" +
                "TDELMAkGA1UECwwCc3AxIDAeBgNVBAMMF3NwLnNwcmluZy5zZWN1cml0eS5zYW1s\n" +
                "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDRu7/EI0BlNzMEBFVAcbx+lLos\n" +
                "vzIWU+01dGTY8gBdhMQNYKZ92lMceo2CuVJ66cUURPym3i7nGGzoSnAxAre+0YIM\n" +
                "+U0razrWtAUE735bkcqELZkOTZLelaoOztmWqRbe5OuEmpewH7cx+kNgcVjdctOG\n" +
                "y3Q6x+I4qakY/9qhBQIDAQABMA0GCSqGSIb3DQEBCwUAA4GBAAeViTvHOyQopWEi\n" +
                "XOfI2Z9eukwrSknDwq/zscR0YxwwqDBMt/QdAODfSwAfnciiYLkmEjlozWRtOeN+\n" +
                "qK7UFgP1bRl5qksrYX5S0z2iGJh0GvonLUt3e20Ssfl5tTEDDnAEUMLfBkyaxEHD\n" +
                "RZ/nbTJ7VTeZOSyRoVn5XHhpuJ0B\n" +
                "-----END CERTIFICATE-----";
        PrivateKey pk = RsaKeyConverters.pkcs8().convert(new ByteArrayInputStream(key.getBytes()));
        X509Certificate cert = x509Certificate(certificate);
        return new Saml2X509Credential(pk, cert, SIGNING, DECRYPTION);
    }


}